// extension/core/privacy-client.js
// Ìè¥Î∞± Ï†úÍ±∞Îêú ÏÑúÎ≤Ñ Ï†ÑÏö© Í∞úÏù∏Ï†ïÎ≥¥ Î≥¥Ìò∏ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏

class PrivacyClient {
    constructor() {
        this.apiEndpoint = 'http://localhost:8000';
        this.isServerConnected = false;
        this.connectionAttempts = 0;
        this.maxRetries = 3;

        this.settings = {
            threshold: 50,
            mode: 'medical',
            timeout: 10000,
            retryInterval: 5000
        };

        // ÏöîÏ≤≠ Ï∫êÏãú (ÎèôÏùºÌïú ÌÖçÏä§Ìä∏ Ïû¨Î∂ÑÏÑù Î∞©ÏßÄ)
        this.cache = new Map();
        this.cacheMaxSize = 50;
        this.cacheTimeout = 300000; // 5Î∂Ñ

        this.init();
    }

    async init() {
        console.log('üîó Privacy Client Ï¥àÍ∏∞Ìôî Ï§ë (ÏÑúÎ≤Ñ Ï†ÑÏö© Î™®Îìú)...');
        await this.checkServerConnection();
        this.startHealthCheck();
        this.setupCacheCleanup();
    }

    /**
     * ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏
     */
    async checkServerConnection() {
        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), this.settings.timeout);

            const response = await fetch(`${this.apiEndpoint}/health`, {
                method: 'GET',
                signal: controller.signal,
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-cache'
                }
            });

            clearTimeout(timeoutId);

            if (response.ok) {
                const data = await response.json();
                this.isServerConnected = true;
                this.connectionAttempts = 0;

                console.log(`‚úÖ ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÏÑ±Í≥µ: ${data.status || 'healthy'}`);
                console.log(`ü§ñ Î™®Îç∏ Ï†ïÎ≥¥: ${data.model_info?.name || 'Unknown'} v${data.model_info?.version || 'Unknown'}`);

                // ÏÑúÎ≤Ñ Ï†ïÎ≥¥ Ï†ÄÏû•
                this.serverInfo = data;
                return true;
            } else {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

        } catch (error) {
            this.isServerConnected = false;
            this.connectionAttempts++;

            if (error.name === 'AbortError') {
                console.error(`‚è±Ô∏è ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÏãúÍ∞Ñ Ï¥àÍ≥º (ÏãúÎèÑ: ${this.connectionAttempts}/${this.maxRetries})`);
            } else {
                console.error(`‚ùå ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïã§Ìå®: ${error.message} (ÏãúÎèÑ: ${this.connectionAttempts}/${this.maxRetries})`);
            }

            return false;
        }
    }

    /**
     * Ï£ºÍ∏∞Ï†Å ÏÑúÎ≤Ñ ÏÉÅÌÉú Ï≤¥ÌÅ¨
     */
    startHealthCheck() {
        setInterval(async () => {
            if (!this.isServerConnected) {
                if (this.connectionAttempts < this.maxRetries) {
                    console.log(`üîÑ ÏÑúÎ≤Ñ Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ (${this.connectionAttempts + 1}/${this.maxRetries})`);
                    await this.checkServerConnection();
                } else {
                    console.error(`üö´ ÏµúÎåÄ Ïû¨ÏãúÎèÑ ÌöüÏàò Ï¥àÍ≥º. ÏÑúÎ≤ÑÎ•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.`);
                }
            } else {
                // Ïó∞Í≤∞Îêú ÏÉÅÌÉúÏóêÏÑúÎèÑ Ï£ºÍ∏∞Ï†Å Ï≤¥ÌÅ¨
                const isHealthy = await this.quickHealthCheck();
                if (!isHealthy) {
                    console.warn('‚ö†Ô∏è ÏÑúÎ≤Ñ Ïó∞Í≤∞Ïù¥ ÎÅäÏñ¥Ï°åÏäµÎãàÎã§. Ïû¨Ïó∞Í≤∞ÏùÑ ÏãúÎèÑÌï©ÎãàÎã§.');
                    this.isServerConnected = false;
                    this.connectionAttempts = 0;
                }
            }
        }, this.settings.retryInterval);
    }

    /**
     * Îπ†Î•∏ Ìó¨Ïä§ Ï≤¥ÌÅ¨
     */
    async quickHealthCheck() {
        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 3000);

            const response = await fetch(`${this.apiEndpoint}/health`, {
                method: 'GET',
                signal: controller.signal
            });

            clearTimeout(timeoutId);
            return response.ok;

        } catch (error) {
            return false;
        }
    }

    /**
     * ÌÖçÏä§Ìä∏ ÎßàÏä§ÌÇπ Ï≤òÎ¶¨ (ÏÑúÎ≤Ñ Ï†ÑÏö©)
     */
    async maskText(text, options = {}) {
        if (!text || text.trim().length === 0) {
            return this.createEmptyResult(text);
        }

        const cleanText = text.trim();
        const cacheKey = this.generateCacheKey(cleanText, options);

        // Ï∫êÏãú ÌôïÏù∏
        if (this.cache.has(cacheKey)) {
            const cached = this.cache.get(cacheKey);
            if (Date.now() - cached.timestamp < this.cacheTimeout) {
                console.log('üìã Ï∫êÏãúÎêú Í≤∞Í≥º ÏÇ¨Ïö©');
                return cached.result;
            } else {
                this.cache.delete(cacheKey);
            }
        }

        // ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌïÑÏàò ÌôïÏù∏
        if (!this.isServerConnected) {
            console.error('üö´ ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. Î°úÏª¨ Ï≤òÎ¶¨Í∞Ä ÎπÑÌôúÏÑ±ÌôîÎêòÏñ¥ ÏûàÏäµÎãàÎã§.');
            return this.createServerErrorResult(cleanText, 'ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. ÏÑúÎ≤ÑÎ•º ÏãúÏûëÌïòÍ≥† Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
        }

        const requestData = {
            text: cleanText,
            threshold: options.threshold || this.settings.threshold,
            mode: options.mode || this.settings.mode,
            use_contextual_analysis: true,
            request_id: this.generateRequestId()
        };

        console.log(`üöÄ ÏÑúÎ≤Ñ ÎßàÏä§ÌÇπ ÏöîÏ≤≠: ${cleanText.length}Ïûê, Î™®Îìú: ${requestData.mode}`);

        try {
            const result = await this.serverMaskText(requestData);
            console.log(`‚úÖ ÏÑúÎ≤Ñ ÎßàÏä§ÌÇπ ÏôÑÎ£å: ${result.stats.maskedEntities}/${result.stats.totalEntities} Í∞úÏ≤¥ (Î™®Îç∏: ${result.modelInfo?.name || 'Unknown'})`);

            // Í≤∞Í≥º Ï∫êÏã±
            this.setCacheResult(cacheKey, result);

            return result;

        } catch (error) {
            console.error('‚ùå ÏÑúÎ≤Ñ ÎßàÏä§ÌÇπ Ïã§Ìå®:', error.message);
            this.isServerConnected = false;

            return this.createServerErrorResult(cleanText, `ÏÑúÎ≤Ñ Ï≤òÎ¶¨ Ïã§Ìå®: ${error.message}`);
        }
    }

    /**
     * ÏÑúÎ≤Ñ Í∏∞Î∞ò ÎßàÏä§ÌÇπ (Ïú†ÏùºÌïú Ï≤òÎ¶¨ Î∞©Î≤ï)
     */
    async serverMaskText(requestData) {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), this.settings.timeout);

        try {
            const response = await fetch(`${this.apiEndpoint}/api/mask`, {
                method: 'POST',
                signal: controller.signal,
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'X-Request-ID': requestData.request_id
                },
                body: JSON.stringify(requestData)
            });

            clearTimeout(timeoutId);

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP ${response.status}: ${errorText || response.statusText}`);
            }

            const result = await response.json();

            if (!result.success) {
                throw new Error(result.error || 'ÏÑúÎ≤Ñ Ï≤òÎ¶¨ Ïã§Ìå®');
            }

            return this.normalizeResult(result, 'server');

        } catch (error) {
            clearTimeout(timeoutId);

            if (error.name === 'AbortError') {
                throw new Error('ÏÑúÎ≤Ñ ÏùëÎãµ ÏãúÍ∞Ñ Ï¥àÍ≥º');
            }
            throw error;
        }
    }

    /**
     * Í≤∞Í≥º Ï†ïÍ∑úÌôî
     */
    normalizeResult(serverResult, source = 'server') {
        const normalized = {
            success: true,
            originalText: serverResult.original_text,
            maskedText: serverResult.masked_text,
            stats: {
                totalEntities: serverResult.stats?.total_entities || 0,
                maskedEntities: serverResult.stats?.masked_entities || 0,
                avgRisk: serverResult.stats?.avg_risk || 0,
                processingTime: serverResult.stats?.processing_time || 0
            },
            maskingLog: serverResult.masking_log || [],
            modelInfo: {
                name: serverResult.model_info?.name || 'Unknown',
                version: serverResult.model_info?.version || 'Unknown',
                type: serverResult.model_info?.type || 'neural_network',
                source: source
            },
            timestamp: new Date().toISOString()
        };

        return normalized;
    }

    /**
     * Îπà Í≤∞Í≥º ÏÉùÏÑ±
     */
    createEmptyResult(text) {
        return {
            success: true,
            originalText: text || '',
            maskedText: text || '',
            stats: {
                totalEntities: 0,
                maskedEntities: 0,
                avgRisk: 0,
                processingTime: 0
            },
            maskingLog: [],
            modelInfo: {
                name: 'N/A',
                version: 'N/A',
                type: 'empty',
                source: 'client'
            },
            timestamp: new Date().toISOString()
        };
    }

    /**
     * ÏÑúÎ≤Ñ Ïò§Î•ò Í≤∞Í≥º ÏÉùÏÑ±
     */
    createServerErrorResult(text, errorMessage) {
        return {
            success: false,
            originalText: text || '',
            maskedText: text || '',
            error: errorMessage,
            stats: {
                totalEntities: 0,
                maskedEntities: 0,
                avgRisk: 0,
                processingTime: 0
            },
            maskingLog: [],
            modelInfo: {
                name: 'Error',
                version: 'N/A',
                type: 'error',
                source: 'client'
            },
            timestamp: new Date().toISOString()
        };
    }

    /**
     * Îπ†Î•∏ Î∂ÑÏÑù (Ïã§ÏãúÍ∞Ñ Í≤ΩÍ≥†Ïö©) - ÏÑúÎ≤Ñ Ï†ÑÏö©
     */
    async quickAnalyze(text) {
        if (!text || text.length < 10) {
            return { hasRisk: false, riskLevel: 0, entityCount: 0, usingServer: false };
        }

        if (!this.isServerConnected) {
            return {
                hasRisk: false,
                riskLevel: 0,
                entityCount: 0,
                error: 'ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§',
                usingServer: false
            };
        }

        try {
            const result = await this.maskText(text);
            return {
                hasRisk: result.stats.totalEntities > 0,
                riskLevel: result.stats.avgRisk,
                entityCount: result.stats.totalEntities,
                processingTime: result.stats.processingTime,
                usingServer: true,
                modelInfo: result.modelInfo
            };
        } catch (error) {
            console.warn('Îπ†Î•∏ Î∂ÑÏÑù Ïã§Ìå®:', error);
            return {
                hasRisk: false,
                riskLevel: 0,
                entityCount: 0,
                error: error.message,
                usingServer: false
            };
        }
    }

    /**
     * Ï∫êÏãú Í¥ÄÎ†® Î©îÏÜåÎìúÎì§
     */
    generateCacheKey(text, options) {
        const optionsStr = JSON.stringify({
            threshold: options.threshold || this.settings.threshold,
            mode: options.mode || this.settings.mode
        });
        return `${text.substring(0, 100)}_${btoa(optionsStr).substring(0, 10)}`;
    }

    setCacheResult(key, result) {
        if (this.cache.size >= this.cacheMaxSize) {
            // Í∞ÄÏû• Ïò§ÎûòÎêú Ìï≠Î™© ÏÇ≠Ï†ú
            const firstKey = this.cache.keys().next().value;
            this.cache.delete(firstKey);
        }

        this.cache.set(key, {
            result: result,
            timestamp: Date.now()
        });
    }

    setupCacheCleanup() {
        // 10Î∂ÑÎßàÎã§ ÎßåÎ£åÎêú Ï∫êÏãú Ï†ïÎ¶¨
        setInterval(() => {
            const now = Date.now();
            for (const [key, value] of this.cache.entries()) {
                if (now - value.timestamp > this.cacheTimeout) {
                    this.cache.delete(key);
                }
            }
        }, 600000); // 10Î∂Ñ
    }

    /**
     * ÏöîÏ≤≠ ID ÏÉùÏÑ±
     */
    generateRequestId() {
        return `req_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;
    }

    /**
     * ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏
     */
    updateSettings(newSettings) {
        this.settings = { ...this.settings, ...newSettings };
        console.log('‚öôÔ∏è ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏:', this.settings);

        // Ï∫êÏãú Ï¥àÍ∏∞Ìôî (ÏÑ§Ï†ï Î≥ÄÍ≤ΩÏúºÎ°ú Ïù∏Ìïú Í≤∞Í≥º Ï∞®Ïù¥ Î∞©ÏßÄ)
        this.cache.clear();
    }

    /**
     * Ïó∞Í≤∞ ÏÉÅÌÉú Î∞è ÌÜµÍ≥Ñ Î∞òÌôò
     */
    getStatus() {
        return {
            connected: this.isServerConnected,
            endpoint: this.apiEndpoint,
            settings: this.settings,
            connectionAttempts: this.connectionAttempts,
            maxRetries: this.maxRetries,
            cacheSize: this.cache.size,
            serverInfo: this.serverInfo || null,
            fallbackEnabled: false // Ìè¥Î∞± ÎπÑÌôúÏÑ±Ìôî Î™ÖÏãú
        };
    }

    /**
     * ÏàòÎèô Ïû¨Ïó∞Í≤∞
     */
    async reconnect() {
        console.log('üîÑ ÏÑúÎ≤Ñ ÏàòÎèô Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ...');
        this.connectionAttempts = 0;
        const result = await this.checkServerConnection();

        if (result) {
            console.log('‚úÖ ÏàòÎèô Ïû¨Ïó∞Í≤∞ ÏÑ±Í≥µ');
        } else {
            console.error('‚ùå ÏàòÎèô Ïû¨Ïó∞Í≤∞ Ïã§Ìå®');
        }

        return result;
    }

    /**
     * Ï∫êÏãú Ï¥àÍ∏∞Ìôî
     */
    clearCache() {
        this.cache.clear();
        console.log('üóëÔ∏è Ï∫êÏãú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
    }

    /**
     * ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌïÑÏàò ÌôïÏù∏
     */
    requireServerConnection() {
        if (!this.isServerConnected) {
            throw new Error('Ïù¥ Í∏∞Îä•ÏùÑ ÏÇ¨Ïö©ÌïòÎ†§Î©¥ ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏñ¥Ïïº Ìï©ÎãàÎã§. localhost:8000ÏóêÏÑú ÏÑúÎ≤ÑÎ•º ÏãúÏûëÌï¥Ï£ºÏÑ∏Ïöî.');
        }
    }

    /**
     * Ïó∞Í≤∞ ÏÉÅÌÉú getter
     */
    get isConnected() {
        return this.isServerConnected;
    }

    /**
     * ÏÑúÎ≤Ñ Ï†ïÎ≥¥ getter
     */
    get modelInfo() {
        return this.serverInfo?.model_info || { name: 'Unknown', version: 'Unknown' };
    }
}

// Ï†ÑÏó≠ Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ± Î∞è ÎÖ∏Ï∂ú
if (typeof window !== 'undefined') {
    window.privacyClient = new PrivacyClient();

    // ÎîîÎ≤ÑÍπÖÏùÑ ÏúÑÌïú Ï†ÑÏó≠ ÎÖ∏Ï∂ú
    window.PrivacyClient = PrivacyClient;

    console.log('üõ°Ô∏è Privacy Client Î°úÎìú ÏôÑÎ£å (ÏÑúÎ≤Ñ Ï†ÑÏö© Î™®Îìú)');
    console.log('üìã Ìè¥Î∞± Í∏∞Îä•: ÎπÑÌôúÏÑ±ÌôîÎê® - ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌïÑÏàò');
}